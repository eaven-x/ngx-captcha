{"version":3,"sources":["ng://@binssoft/ngx-captcha/lib/ngx-captcha.service.ts","ng://@binssoft/ngx-captcha/lib/ngx-captcha.component.ts","ng://@binssoft/ngx-captcha/lib/ngx-captcha.module.ts"],"names":["NgxCaptchaService","this","captchSource","BehaviorSubject","captchStatus","asObservable","prototype","setCaptchaStatus","code","next","Injectable","args","providedIn","NgxCaptchaComponent","captchService","config","captch_input","resultCode","ngOnChanges","font","size","family","strokeColor","length","cssClass","type","back","stroke","solid","createCaptcha","_this","char","Math","random","toString","substring","toUpperCase","num1","floor","num2","operators","operator","setTimeout","captcahCanvas","document","getElementById","ctx","getContext","fillStyle","fillRect","width","height","beginPath","style","letterSpacing","color","textBaseline","fillText","strokeStyle","i","moveTo","lineTo","playCaptcha","msg","SpeechSynthesisUtterance","split","join","pitch","window","speechSynthesis","speak","checkCaptcha","Component","selector","template","Input","NgxCaptchaModule","forRoot","ngModule","providers","NgModule","declarations","imports","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxCaptchaService {\n\n  captchSource = new BehaviorSubject(null);\n  captchStatus = this.captchSource.asObservable(); \n  constructor() { }\n\n  setCaptchaStatus(code) {\n    this.captchSource.next(code);\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n} from \"@angular/core\";\nimport {NgxCaptchaService} from './ngx-captcha.service'\n@Component({\n  selector: 'ngx-captcha',\n  templateUrl:'./ngx-captcha.component.html',\n  styleUrls: ['./ngx-captcha.component.scss']\n})\nexport class NgxCaptchaComponent implements OnChanges {\n\n  @Input(\"config\") config: any = {};\n  captch_input:any = null;\n  code: any = null;\n  resultCode:any = null;\n  constructor(private captchService:NgxCaptchaService){}\n  ngOnChanges() {\n    if (this.config) {\n      if (!this.config.font || !this.config.font.size) {\n        this.config[\"font\"][\"size\"] = \"40px\";\n      }\n      if (!this.config.font || !this.config.font.family) {\n        this.config[\"font\"][\"family\"] = \"Arial\";\n      }\n      if (!this.config.strokeColor) {\n        this.config[\"strokeColor\"] = \"#f20c6c\";\n      }\n      if (!this.config.length) {\n        this.config[\"length\"] = 6;\n      }\n      if (!this.config.cssClass) {\n        this.config[\"cssClass\"] = '';\n      }\n\n      if (!this.config.type) {\n        this.config[\"type\"] = 1;\n      }\n      \n      if (!this.config.back || !this.config.back.stroke) {\n        this.config[\"back\"][\"stroke\"] = \"\";\n      }\n      if (!this.config.back || !this.config.back.solid) {\n        this.config[\"back\"][\"solid\"] = \"#f2efd2\";\n      }\n\n      this.createCaptcha();\n    }\n  }\n  createCaptcha() {\n\n    switch(this.config.type) {\n      case 1:\n  \n      let char =\n      Math.random()\n        .toString(24)\n        .substring(2, this.config.length) +\n      Math.random()\n        .toString(24)\n        .substring(2, 4);\n      this.code = this.resultCode = char.toUpperCase();\n      break;\n      case 2:\n      let num1 = Math.floor(Math.random() * 99);\n      let num2 = Math.floor(Math.random() * 9);\n      let operators = ['+','-'];\n      let operator = operators[(Math.floor(Math.random() * operators.length))];\n      this.code =  num1+operator+num2+'=?';\n      this.resultCode = (operator == '+')? (num1+num2):(num1-num2);\n      break;\n    }\n    \n\n    setTimeout(() => {\n      let captcahCanvas: any = document.getElementById(\"captcahCanvas\");\n      var ctx = captcahCanvas.getContext(\"2d\");\n      ctx.fillStyle = this.config.back.solid;\n      ctx.fillRect(0, 0, captcahCanvas.width, captcahCanvas.height);\n\n      ctx.beginPath();\n\n      captcahCanvas.style.letterSpacing = 15 + \"px\";\n      ctx.font = this.config.font.size + \" \" + this.config.font.family;\n      ctx.fillStyle = this.config.font.color;\n      ctx.textBaseline = \"middle\";\n      ctx.fillText(this.code, 40, 50);\n      if (this.config.back.stroke) {\n        ctx.strokeStyle = this.config.back.stroke;\n        for (var i = 0; i < 150; i++) {\n          ctx.moveTo(Math.random() * 300, Math.random() * 300);\n          ctx.lineTo(Math.random() * 300, Math.random() * 300);\n        }\n        ctx.stroke();\n      }\n       \n      // this.captchaCode.emit(char);\n    }, 100);\n  }\n\n  playCaptcha() {\n    var msg = new SpeechSynthesisUtterance(this.code.split('').join(' '));\n    msg.pitch = 0.1;\n    window.speechSynthesis.speak(msg);\n  }\n\n  checkCaptcha() {\n    if (this.captch_input != this.resultCode) {\n      this.captchService.setCaptchaStatus(false);\n      \n    } else  {\n      this.captchService.setCaptchaStatus(true);\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgxCaptchaComponent } from './ngx-captcha.component';\nimport {NgxCaptchaService} from './ngx-captcha.service';\n\n\n@NgModule({\n  declarations: [NgxCaptchaComponent],\n  imports: [\n    FormsModule\n  ],\n  exports: [NgxCaptchaComponent]\n})\nexport class NgxCaptchaModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxCaptchaModule,\n      providers: [ NgxCaptchaService ]\n    };\n  }\n}\n"]}